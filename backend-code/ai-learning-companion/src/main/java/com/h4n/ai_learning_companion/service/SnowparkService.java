package com.h4n.ai_learning_companion.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.snowflake.snowpark.DataFrame;
import com.snowflake.snowpark.Row;
import com.snowflake.snowpark.Session;

import scala.collection.JavaConverters;

@Service
public class SnowparkService
{
	private final Session session;
	private static final String  MODEL = "snowflake-arctic";	   

	private static final String SCHEMA_TASK = """
			You are a Snowflake SQL generator.
			Use only the following tables and columns under the moodle_app.public schema

			1. Table: testcourses, Columns: SHORTNAME, FULLNAME, CATEGORY, VISIBLE, STARTDATE, ENDDATE, IDNUMBER, SUMMARY, FORMAT, NUMSECTIONS

			Do NOT include explanations or extra text or any quotes or extra characters like ; only the raw SQL query.
			""";

	public SnowparkService(Session session) {
		this.session = session;
	}

	public void runQuery(String prompt)
	{
		//DataFrame df = session.sql("Select * from moodle_app.public.testcourses");
		//DataFrame df = session.sql("SELECT AI_COMPLETE(OBJECT_CONSTRUCT('prompt', 'Write a SQL query to find the top 2 courses from the table moodle_app.public.testcourses')) AS result");
		//DataFrame df = session.sql("SELECT AI_COMPLETE('snowflake-arctic', OBJECT_CONSTRUCT('prompt', 'Write a SQL query to find the top 2 courses from the table moodle_app.public.testcourses')) AS result");
		//df.show();

		String model = "snowflake-arctic";	        
		String userPrompt = "Write a SQL query to find the top 2 courses from the table moodle_app.public.testcourses which has the most number of students enrolled";

		// Use SQL via Snowpark
		String query = String.format("SELECT AI_COMPLETE('%s','%s') AS completion", model, userPrompt.replace("'", "''"));

		DataFrame df = session.sql(query);
		df.show(10, 5000);

	}

	public String createAndExecuteQuery(String userPrompt)
	{	

		String fullPrompt = buildPrompt(userPrompt);
		String escapedPrompt = fullPrompt.replace("'", "''");

		// Generate the sql
		String aiQuerySQL = String.format("SELECT AI_COMPLETE('%s', '%s') AS generated_sql", MODEL, escapedPrompt);

		DataFrame aiResult = session.sql(aiQuerySQL);
		List<Row> resultRows = Arrays.asList(aiResult.collect());

		if (resultRows.isEmpty())
		{
			System.out.println("No SQL was generated by AI.");
			//return "No SQL was generated by AI.";
		}

		String generatedSQL = resultRows.get(0).getString(0).trim();
		String finalGeneratedSql = cleanSql(generatedSQL);
		System.out.println("üîÅ AI-Generated SQL:\n" + finalGeneratedSql);

		DataFrame queryResult;
		List<Row> queryResultRows = null;
		String[] columnNames = null;
		try
		{
			queryResult = session.sql(finalGeneratedSql);
			queryResultRows = Arrays.asList(queryResult.collect());
			columnNames = JavaConverters.seqAsJavaList(queryResult.schema().names()).toArray(new String[0]);
			queryResult.show();
		} 

		catch (Exception e)
		{
			System.err.println("‚ùå Failed to execute generated SQL.");
			System.err.println("Generated SQL was:\n" + generatedSQL);
			e.printStackTrace();
		}

		ObjectMapper mapper = new ObjectMapper();
		ArrayNode resultArray = mapper.createArrayNode();
		for (Row row : queryResultRows)
		{
			ObjectNode obj = mapper.createObjectNode();
			for (int i = 0; i < columnNames.length; i++) {
				obj.putPOJO(columnNames[i], row.get(i));
			}
			resultArray.add(obj);
		}
		String resultJson = null;
		try {
			resultJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(resultArray);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String summaryPrompt = String.format("""
	            The user asked: "%s"
	            Here is the SQL result:
	            %s
	            Summarize this in clear natural language, as if explaining to a business user.
	            """, userPrompt, resultJson);

	        String summarySql = String.format("SELECT AI_COMPLETE('%s', '%s') AS explanation",
	                MODEL, summaryPrompt.replace("'", "''"));

	       return session.sql(summarySql).collect()[0].getString(0);

	}

	private static String buildPrompt(String userPrompt)
	{
		return SCHEMA_TASK + "User Request: " + userPrompt;
	}
	
	private static String cleanSql(String rawSql)
	{
        String cleaned = rawSql.trim();
        if (cleaned.startsWith("\"") && cleaned.endsWith("\"")) {
            cleaned = cleaned.substring(1, cleaned.length() - 2).trim();
        }
        return cleaned;
    }
}
