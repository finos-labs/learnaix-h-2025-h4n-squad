// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Dialog module for AI Chat block.
 *
 * @module     block_ai_chat/dialog
 * @copyright  2023 Basil
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define(['jquery',
        'core/ajax',
        'core/notification',
        'core/modal_factory',
        'core/modal_events',
        'core/str',
        'core/templates',
        'core/config'
    ],
    function($, Ajax, Notification, ModalFactory, ModalEvents, Str, Templates, Config) {
        'use strict';

    var CHAT_SERVICE_URL = 'http://localhost:3000';

    var state = {
        modal: null,
        messages: [],
        processing: false,
        params: null
    };

    /**
     * Initialize the chat dialog.
     *
     * @param {Object} params Configuration parameters
     * @return {Promise} A promise that resolves when the dialog is ready
     */
    function init(initParams) {
        state.params = initParams;

        return Promise.all([
            Str.get_string('pluginname', 'block_ai_chat'),
            Templates.render('block_ai_chat/dialog_modal', {})
        ]).then(function([title, body]) {
            return ModalFactory.create({
                type: ModalFactory.types.DEFAULT,
                title: title,
                body: body,
                large: true,
            });
        }).then(function(modal) {
            state.modal = modal;
            
            // Setup event handlers
            modal.getRoot().on(ModalEvents.shown, function() {
                setupHandlers(modal);
            });
            modal.show();
            return modal;
        }).catch(Notification.exception);
    }

    /**
     * Set up event handlers for the chat interface
     * @param {Object} modal The modal instance
     */
    /**
     * Set up event handlers for the chat interface
     * @param {Object} modal The modal instance
     */
    function setupHandlers(modal) {
        var root = modal.getRoot();
        var messageInput = root.find('.block-ai-chat-input');
        var sendButton = root.find('.block-ai-chat-send');

        function sendMessage() {
            if (state.processing) {
                return;
            }

            var message = messageInput.val().trim();
            if (!message) {
                return;
            }

            state.processing = true;
            messageInput.prop('disabled', true);
            sendButton.prop('disabled', true);

            // Show user message immediately
            appendMessage(message, 'user');
            messageInput.val('');

            // Send to Java service
            fetch(CHAT_SERVICE_URL + '/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Moodle-Session': Config.sesskey
                },
                body: JSON.stringify({
                    message: message,
                    userId: state.params.userid,
                    contextId: state.params.contextid
                })
            })
            .then(response => response.json())
            .then(data => {
                appendMessage(data.response, 'ai');
            })
            .catch(() => {
                Notification.exception(new Error('Error communicating with chat service'));
            })
            .finally(() => {
                state.processing = false;
                messageInput.prop('disabled', false);
                sendButton.prop('disabled', false);
            });
        }

        messageInput.on('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        sendButton.on('click', sendMessage);
    }

    /**
     * Append a message to the chat window
     * @param {string} message The message text
     * @param {string} sender Either 'user' or 'ai'
     */
    function appendMessage(message, sender) {
        Templates.render('block_ai_chat/message', {
            text: message,
            isUser: sender === 'user'
        }).then(function(html) {
            var chatOutput = state.modal.getRoot().find('.block-ai-chat-messages');
            chatOutput.append(html);
            chatOutput.scrollTop(chatOutput[0].scrollHeight);
        }).catch(Notification.exception);
    }

    return {
        init: init
    };
});